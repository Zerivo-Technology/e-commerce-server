generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?  @unique
  password      String?
  phoneNumber   String?
  role          String
  provider      String
  googleId      String?
  providerId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  transactions  Transaction[]
  biodatas      Biodata[]
  carts         Cart[]
  chatsSent     Chat[] @relation("ChatSender")
  chatsReceived Chat[] @relation("ChatReceiver")
}

model Biodata{
  id            String  @id @default(uuid())
  userId        String
  tanggal_lahir String
  jenis_kelamin String  
  alamatLengkap String
  user          User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Product {
  id             String   @id @default(uuid())
  nameProduct    String?
  about          String?
  categoryId     Int
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  image          String
  stoks          Int
  price          Float
  productItems    ProductItem[]
  transactionItems TransactionItem[]
}

model Size {
  id              Int  @id @default(autoincrement())
  size            String
  productItems    ProductItem[]
}

model Category {
  id           Int       @id @default(autoincrement())
  nameCategory String
  products     Product[]
}

model Cart {
 id             String @id @default(uuid())
 userId         String
 user           User @relation(references: [id], fields: [userId], onDelete: Cascade)
 productItems   ProductItem[]      
}

model ProductItem{
  id            Int @id @default (autoincrement())
  cartId        String 
  productId     String
  sizeId        Int
  quantity      Int
  sizes         Size @relation(references: [id], fields: [sizeId], onDelete: Cascade)
  carts         Cart @relation(references: [id], fields: [cartId], onDelete: Cascade)
  products      Product @relation(references: [id], fields: [productId], onDelete: Cascade)
}

model Coupon {
  id         String @id @default(uuid())
  name       String
  cut_price  Float
}

model Transaction {
  id                String          @id @default(uuid())
  order_id          String?  
  total             Int
  paymentMethod     String
  paymentStatus     Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  transactionItems  TransactionItem[]
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TransactionItem {
  id            Int       @id @default(autoincrement())
  transactionId String
  productId     String
  quantity      Int         @default(1)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum StatusPayment {
  PENDING
  PAID
  FAILED
  CANCELED
}

model Chat {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  sender      User     @relation("ChatSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ChatReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  message     String
  sentAt      DateTime @default(now())
  readStatus  Boolean
}

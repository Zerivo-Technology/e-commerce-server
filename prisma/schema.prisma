generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(uuid())
  name                String?
  email               String?  @unique
  password            String?
  phoneNumber         String?
  role                String
  provider            String
  googleId            String?
  providerId          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  carts               Cart[]
  transactions        Transaction[]
}

model Products {
  id          String   @id @default(uuid())
  nameProduct String?
  about       String?
  categoryId  Int
  category    Category @relation(references: [id], fields: [categoryId], onDelete: Cascade)
  age         Age
  image       String
  quantity    String
  price       String
  carts       Cart[]
}

model Category{
  id              Int @id @default(autoincrement())
  nameCategory    String
  products        Products[]
}

enum Age {
  MEN
  WOMEN
  KIDS
}


model Cart {
  id              String @id @default(uuid())
  productId       String
  userId          String
  products        Products @relation(references: [id], fields: [productId], onDelete: Cascade)  
  user            User @relation(references: [id], fields: [userId], onDelete: Cascade)
  quantity        String
  transactions    Transaction[]
}

model Coupon {
  id              String @id @default(uuid())
  name            String 
  cut_price       String
}

model Transaction {
  id              String @id @default(uuid())
  userId          String
  users           User @relation(references: [id], fields: [userId], onDelete: Cascade)
  cartId          String
  carts           Cart @relation(references: [id], fields: [cartId], onDelete: Cascade)
  total           String
  payment_method  String
  payment_status  Status_Payment
  payment_time    DateTime @default(now())
  created_at      DateTime @default(now())
}

enum Status_Payment {
  pending
  paid
  failed
  canceled
}

model Chat {
  id             String   @id @default(uuid())
  senderId       String
  receiveId      String
  message        String
  sent_at        DateTime @default(now())
  read_status    Boolean
}